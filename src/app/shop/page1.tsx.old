//shop

'use client'

import { useCallback, useEffect, useState, Suspense } from 'react'
import Link from 'next/link'
import { supabase } from '@/lib/supabase'
import { loadStripe } from '@stripe/stripe-js'
import Layout from '@/components/Layout'
import CheckoutRedirectTrigger from './CheckoutRedirectTrigger'
//import { useCart } from '@/context/CartContext'

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!)

const BUSINESS_COORDS = { lat: 51.501009, lon: -3.46716 }

const products = [
  {
    id: 1,
    name: 'Home Network AdBlocker',
    price: '£75',
    priceAmount: 7500,
    description: 'Block Ads and filter content for every device on your network.',
  },
  {
    id: 2,
    name: 'Monthly Subscription',
    price: '£6/month',
    priceAmount: 600,
    description: 'Regular updates, proactive support, blocking insights and assistance.',
  },
  {
    id: 3,
    name: 'Hourly Support',
    price: '£25/hr',
    priceAmount: 2500,
    description: 'Technical help or training when you need it most.',
  },
]

function getDistanceMiles(lat1, lon1, lat2, lon2) {
  const R = 3958.8
  const toRad = (x) => (x * Math.PI) / 180
  const dLat = toRad(lat2 - lat1)
  const dLon = toRad(lon2 - lon1)
  const a = Math.sin(dLat / 2) ** 2 +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
  return R * c
}

export default function ShopPage() {
  const [user, setUser] = useState(null)
  const [postcodeInput, setPostcodeInput] = useState('')
  const [serviceable, setServiceable] = useState(null)
  const [showNotifyForm, setShowNotifyForm] = useState(false)
  const [showPrompt, setShowPrompt] = useState(false)
  const [message, setMessage] = useState('')
  {/*const { cart, addToCart, removeFromCart, decreaseQuantity } = useCart()*/}

  useEffect(() => {
    supabase.auth.getUser().then(({ data: { user } }) => setUser(user))
  }, [])

  const handleCheckPostcode = async () => {
    try {
      const res = await fetch(`https://api.postcodes.io/postcodes/${postcodeInput}`)
      const data = await res.json()

      if (data.status === 200) {
        const { latitude, longitude } = data.result
        const distance = getDistanceMiles(latitude, longitude, BUSINESS_COORDS.lat, BUSINESS_COORDS.lon)

        if (distance <= 20) {
          setServiceable(true)
          setMessage('✅ We service your area!')
        } else {
          setServiceable(false)
          setMessage('❌ Sorry, we don’t service your area.')
          setShowNotifyForm(true)
        }
      } else {
        setMessage('❌ Invalid postcode. Please try again.')
      }
    } catch (err) {
      console.error(err)
      setMessage('❌ Error checking postcode.')
    }
  }

  const startStripeCheckout = useCallback(async () => {
    const stripe = await stripePromise

    const lineItems = cart.map((item) => ({
      price_data: {
        currency: 'gbp',
        product_data: { name: item.name },
        unit_amount: item.priceAmount,
      },
      quantity: item.quantity,
    }))

    const res = await fetch('/api/checkout', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ items: lineItems }),
    })

    const { sessionId } = await res.json()
    await stripe?.redirectToCheckout({ sessionId })
  }, [cart])

  {/*const handleCheckout = () => {
    if (!user) {
      localStorage.setItem('checkoutIntent', 'true')
      localStorage.setItem('cart', JSON.stringify(cart))
      setShowPrompt(true)
    } else {
      startStripeCheckout()
    }
  }*/}

  return (
    <Layout>
      {/* Auth Actions */}
      <section className="w-full py-4 bg-gradient-to-r from-red-500 via-purple-500 to-blue-500">
        <div className="flex justify-end gap-4 px-6">
          {user ? (
            <Link href="/dashboard" className="bg-black text-white px-6 py-3 rounded-lg font-semibold hover:bg-gray-800">Dashboard</Link>
          ) : (
            <>
              <Link href="/register" className="bg-black text-white px-6 py-3 rounded-lg font-semibold hover:bg-gray-800">Register</Link>
              <Link href="/login" className="bg-black text-white px-6 py-3 rounded-lg font-semibold hover:bg-gray-800">Login</Link>
            </>
          )}
        </div>
      </section>

      {/* Intro */}
      <section className="py-20 px-4 text-center">
        <h1 className="text-3xl font-bold mb-4">Shop Products</h1>
        <p className="mb-6 text-lg">
          Our hardware AdBlocker GuardLAN secures your whole network from intrusive ads and trackers.
        </p>
        <Link href="#products" className="btn bg-black text-white">Shop Now</Link>
      </section>

      {/* Postcode Check */}
      <section className="p-4 bg-white text-center">
        <h2 className="text-xl font-semibold mb-2">Check if we service your area</h2>
        <div className="flex justify-center gap-2 mb-2">
          <input
            className="border p-2 w-64"
            placeholder="Enter your postcode"
            value={postcodeInput}
            onChange={(e) => setPostcodeInput(e.target.value)}
          />
          <button className="btn bg-blue-600 text-white" onClick={handleCheckPostcode}>Check</button>
        </div>
        {message && <p className={serviceable ? 'text-green-600' : 'text-red-600'}>{message}</p>}
      </section>

      {/* Notify Modal */}
      {showNotifyForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded shadow max-w-sm w-full">
            <h2 className="text-lg font-bold mb-4">Notify Me</h2>
            <p>Unfortunately we do not currently provide our service to your Postcode. If you are interested please fill in the form below, thank you.</p>
            <form
              onSubmit={(e) => {
                e.preventDefault()
                const formData = new FormData(e.currentTarget)
                const name = formData.get('name')
                const email = formData.get('email')
                console.log({ name, email, postcode: postcodeInput })
                setShowNotifyForm(false)
                setPostcodeInput('')
                setServiceable(null)
                setMessage('')
              }}
              className="space-y-3"
            >
              <input name="name" required className="w-full border p-2" placeholder="Name" />
              <input name="email" required type="email" className="w-full border p-2" placeholder="Email" />
              <button type="submit" className="btn bg-blue-600 text-white w-full">Notify Me</button>
              <button type="button" onClick={() => {
                setShowNotifyForm(false)
                setPostcodeInput('')
                setServiceable(null)
                setMessage('')
              }} className="text-sm text-gray-500 mt-2 hover:underline">
                Cancel
              </button>
            </form>
          </div>
        </div>
      )}

      {/* Product List */}
      <section id="products" className="bg-gradient-to-r from-red-500 via-purple-500 to-blue-500 py-10 px-4 text-white grid md:grid-cols-3 gap-6">
        {products.map((product) => (
          <div key={product.id} className="bg-white text-black p-6 rounded shadow">
            <h3 className="text-lg font-bold">{product.name}</h3>
            <p className="mt-2">{product.description}</p>
            <p className="mt-2 font-semibold">{product.price}</p>
            <button className="btn mt-4 bg-black text-white" onClick={() => addToCart(product)}>Add to Cart</button>
          </div>
        ))}
      </section>

      {/* Auth Prompt */}
      {showPrompt && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
          <div className="bg-white p-6 rounded shadow max-w-sm w-full text-center">
            <h2 className="text-lg font-bold mb-2">Sign in or Register</h2>
            <p className="text-sm mb-4">Create an account or log in to complete your purchase and schedule installation.</p>
            <div className="flex justify-center gap-4">
              <Link href="/login" className="btn bg-blue-600 text-white">Login</Link>
              <Link href="/register" className="btn bg-gray-600 text-white">Register</Link>
            </div>
          </div>
        </div>
      )}

      {/* Checkout Redirect */}
      <Suspense fallback={null}>
        <CheckoutRedirectTrigger user={user} cart={cart} startStripeCheckout={startStripeCheckout} />
      </Suspense>
    </Layout>
  )
}
